rules_version = '2';

function isNewUser(user) {
    return user.size() == 1 &&
        user.email is string
}

service cloud.firestore {
    match /databases/{database}/documents {
        function isNewMessage(message) {
            return  message.size() == 15 &&
                    message.title is string  &&
                    message.content is string &&
                    message.date is timestamp &&
                    message.title.size() <= 60 &&
                    message.content.size() <= 1000&&
                    message.life == 0 &&
                    message.block == 0 &&
                    message.user == request.auth.uid &&
                    message.rank is int &&
                    message.approbation == 0 &&
                    message.unanimite == 0 &&
                    message.participation == 0 &&
                    message.locked == false &&
                    message.type in ["remarque","critique"]
        }
        
        function isNewPoll(message) {
            return  message.size() == 16 &&
                    message.type == "sondage" &&
                    message.answers is list &&
                    message.answers.size() >= 2 &&
                    message.answers.size() <= 4 &&
                    message.title is string  &&
                    message.content is string &&
                    message.date is timestamp &&
                    message.title.size() <= 60 &&
                    message.content.size() <= 1000&&
                    message.life == 0 &&
                    message.block == 0 &&
                    message.user == request.auth.uid &&
                    message.rank is int &&
                    message.approbation == 0 &&
                    message.participation == 0 &&
                    message.unanimite == 0 &&
                    message.locked == false 
        }

        function userExists(){
            return exists(/databases/$(database)/documents/users/$(request.auth.uid))
        }
        function matchesParent(){
            return get(/databases/$(database)/documents/messages/$(request.resource.data.parent)).data.rank==request.resource.data.rank-1&&
                    get(/databases/$(database)/documents/messages/$(request.resource.data.parent)).data.subject==request.resource.data.subject
        }
        function isFirstChild(){
            return request.resource.data.subject == request.resource.data.parent &&
                   request.resource.data.rank == 1 &&
                    get(/databases/$(database)/documents/messages/$(request.resource.data.parent)).data.rank == 0 
        }
        function isSeed(){
             return request.resource.data.rank==0
        }
        
        function isValidVote(vote) {
            return vote.size() == 5 &&
                vote.date is timestamp &&
                vote.message is string &&
                vote.subject is string &&
                vote.vote is string &&
                vote.user == request.auth.uid
        }

        match /users/{userId} {
            allow read, delete: if request.auth.uid == userId; 
            allow create: if request.auth.uid != null && isNewUser(request.resource.data);
            allow update: if false
        }
        
        match /users/{userId}/votesTemp/{vote} { 
        	allow create: if request.auth.uid == userId && isValidVote(request.resource.data) &&
            (get(/databases/$(database)/documents/messages/$(request.resource.data.subject)).data.locked==false || isAdmin())
        	allow read: if request.auth.uid == userId 
            allow delete, update: if false;
		}

        match /categories/{categories} {
            allow write: if false;
            allow read: if true;
        }

        match /messages/{message} {
        	allow create: if request.auth.uid != null &&
                        (isNewMessage(request.resource.data)||isNewPoll(request.resource.data)||isAdmin()) &&
                        userExists() && (matchesParent()||isFirstChild()||isSeed()||isAdmin()) &&
                        (request.resource.data.rank>0||!exists(/databases/$(database)/documents/messages/$(request.resource.data.subject)))
            allow read: if true
            allow update: if isAdmin();
            allow delete: if isAdmin();
        }
        match /treelight/{treelight} {
            allow write: if isAdmin();
            allow read: if true;
        }
        match /tree/{tree} {
            allow write: if isAdmin();
            allow read: if true;
        }
    }
}
